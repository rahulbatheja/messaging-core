spring.application.name=messaging-core
# Retry settings for messaging-core producer
messaging.producer.max-attempts=5
messaging.producer.initial-backoff-ms=100
messaging.producer.multiplier=2.0
messaging.producer.max-backoff-ms=5000
messaging.producer.dlq-append-suffix=true
# messaging.producer.dlq-topic=custom.global.dlq  # optional explicit DLQ
# Retry scheduler threads
messaging.producer.scheduler-threads=4


# Kafka bootstrap servers (where brokers live)
spring.kafka.bootstrap-servers=localhost:9092

# Serialization / deserialization
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.JsonSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.JsonDeserializer

# Consumer group id
spring.kafka.consumer.group-id=orders-service


# Wait for all replicas to ack (strongest durability guarantee)
spring.kafka.producer.acks=all

# Retry automatically inside Kafka client (before our retry kicks in)
spring.kafka.producer.retries=5

# Enable idempotence (no duplicates on retry)
spring.kafka.producer.properties.enable.idempotence=true

